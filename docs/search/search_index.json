{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"UNIDAD 13 - SPA: Vue-router","text":"<p>En esta unidad vamos a ver todo lo relacionado con Vue-router</p>"},{"location":"#consejos","title":"Consejos","text":"<ul> <li>Puedes seguir la tabla de contenidos mostrada en la barra lateral izquierda.</li> <li>Lee con detenimiento todo el contenido.</li> <li>Revisa el c\u00f3digo y pru\u00e9balo.</li> <li>Pregunta al profesor en caso de dudas.</li> </ul>"},{"location":"#codigo-de-ejemplo","title":"C\u00f3digo de ejemplo","text":"JavaScript<pre><code>{\n    path: '/',  \n    components: {\n{\n  path: '/user/:id', \n  component: User,\n  children: [\n    { path: '', component: UserHome },\n    { path: 'profile', component: UserProfile },\n    { path: 'posts', component: UserPosts }\n  ]\n}\n</code></pre>"},{"location":"biblio/","title":"Bibliograf\u00eda","text":"<ul> <li>Curso 'Programaci\u00f3n con JavaScript'. CEFIRE Xest. Arturo Bernal Mayordomo</li> <li>Curso de JavaScript y TypeScript de Arturo Bernal en Youtube</li> <li>MDN Web Docs. Moz://a. https://developer.mozilla.org/es/docs/Web/JavaScript</li> <li>Introducci\u00f3n a JavaScript. Librosweb. http://librosweb.es/libro/javascript/</li> <li>Curso de Javascript (Desarrollo web en entorno cliente). Ada Lovecode - Didacticode (90 v\u00eddeos)</li> <li>Apuntes Desarrollo Web en Entorno Cliente (DWEC). Garc\u00eda Barea, Sergi</li> <li>Apuntes Desarrollo Web en Entorno Cliente (DWEC). Segura Vasco, Juan. CIPFP Batoi.</li> </ul>"},{"location":"instalacion/","title":"Instalaci\u00f3n y creaci\u00f3n de rutas","text":""},{"location":"instalacion/#instalacion","title":"Instalaci\u00f3n","text":"<p>Si al crear nuestro proyecto Vue vamos a la opci\u00f3n manual y seleccionamos el Router no es necesario hacer nada porque se configura todo autom\u00e1ticamente. </p>"},{"location":"instalacion/#anadir-vue-router-a-un-proyecto-vue3-ya-creado","title":"A\u00f1adir vue-router a un proyecto Vue3 ya creado","text":"<p>Vue3 s\u00f3lo soporta versiones vue-router superiores a la 4.x. Para asegurarnos que la instala ejecutaremos: Bash<pre><code>npm install -S vue-router@next\n</code></pre> (o editaremos a mano la versi\u00f3n en el package.json)</p> <p>El resto es todo igual excepto que en el fichero de rutas cambia las primeras l\u00edneas y el objeto que se exporta:</p> JavaScript<pre><code>import { createRouter, createWebHistory } from 'vue-router'\nimport Home from '../views/Home.vue'\nimport About from '../views/About.vue'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Home',\n    component: Home\n  },\n  {\n    path: '/about',\n    name: 'About',\n    component: About\n  },\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\nexport default router\n</code></pre> <p>Y en el fichero main.js se har\u00eda: JavaScript<pre><code>import { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router' // &lt;---\n\ncreateApp(App).use(router).mount('#app')\n</code></pre></p>"},{"location":"instalacion/#crear-las-rutas","title":"Crear las rutas","text":"<p>Las rutas de nuestra aplicaci\u00f3n las definiremos en el fichero router/index.js. All\u00ed creamos la instancia para nuestras rutas (el objeto que exportamos) y la configuramos. Tambi\u00e9n debemos importar todos los componentes que definamos en el router:</p> JavaScript<pre><code>import { createWebHistory, createRouter } from 'vue-router'\n\n// Importamos los componentes que se carguen en alguna ruta\nimport AppHome from './components/AppHome.vue'\nimport AppAbout from './components/AppAbout.vue'\nimport UsersTable from './components/UsersTable.vue'\nimport UserNew from './components/UserNew.vue'\nimport UserEdit from './components/UserEdit.vue'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'home',\n    component: AppHome\n  },{\n    path: '/about',\n    name: about,\n    component: AppAbout\n  },{\n    path: '/users',\n    component: UsersTable\n  },{\n    path: '/new',\n    component: UserNew\n  },{\n    path: '/edit/:id',\n    component: UserEdit\n    props: true\n  }\n];\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\nexport default router\n</code></pre> <p>El modo 'history' de nuestro router indica que use rutas \"amigables\" y que no incluyan la # (piensa que en realidad no se est\u00e1n cargando diferentes p\u00e1ginas sino partes de una \u00fanica p\u00e1gina ya que es una SPA). Esta es la opci\u00f3n que escogeremos siempre en las aplicaciones SPA, aunque si nuestro servidor web usa ASP.NET o JSP habr\u00e1 que decirle que ignore las URLs porque ya se ocupa de ellas Vue. La alternativa ser\u00eda usar <code>createWebHashHistory()</code> pero en ese caso las rutas en vez de ser algo como <code>http://localhost:8080/products</code> ser\u00edan  <code>http://localhost:8080/#products</code>.</p> <p>VueRouter permite rutas din\u00e1micas como la indicada para el componente UserEdit: la ruta <code>/edit/</code> seguida de algo m\u00e1s (ej. <code>/edit/5</code>) har\u00e1 que se cargue el componente UserEdit y que dicho componente reciba en un par\u00e1metro llamado <code>this.$route.params.id</code> la parte final de la ruta. Si a\u00f1adimos a la ruta la opci\u00f3n <code>props: true</code> hacemos que el componente adem\u00e1s reciba el par\u00e1metro en sus props (en este caso recibir\u00e1 una variable llamada id con valor 5).</p> <p>Para cada ruta que queramos mapear hay que definir: * path: la url que har\u00e1 que se cargue el componente * component: el componente que se cargar\u00e1 donde se encuentre la etiqueta \\ en el HTML <p>Adem\u00e1s de esas propiedades podemos indicar: * name: le damos a la ruta un nombre que luego podemos usar para referirnos a ella * props: se usa en rutas din\u00e1micas e indica que el componente recibir\u00e1 el par\u00e1metro de la ruta en sus props. Si no se incluye esta opci\u00f3n el componente tendr\u00e1 que acceder al par\u00e1metro id desde <code>this.$route.params.id</code> </p> <p>Cada vez que pongamos una nueva URL en el navegador no cambiar\u00e1 todo el layout sino que s\u00f3lo se cargar\u00e1 el componente indicado para esa ruta. En el fichero App.vue, en la parte del HTML en que queramos que se carguen los diferentes componentes de nuestra SPA incluiremos la etiqueta: HTML<pre><code>&lt;router-view&gt;&lt;/router-view&gt;\n</code></pre></p> <p>Cuidado!</p> <p>Cuando cambiemos la URL se cargar\u00e1 el componente indicado para la ruta actual.</p>"},{"location":"introduccion/","title":"Introducci\u00f3n","text":""},{"location":"introduccion/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Como comentamos al principio Vue nos va a permitir crear SPA (Single Page Applications) lo que significa que s\u00f3lo se cargar\u00e1 una pagina: index.html. Sin embargo nuestra aplicaci\u00f3n estar\u00e1 dividida en diferentes vistas que el usuario percibir\u00e1 como si fueran p\u00e1ginas diferentes y el encargado de gestionar la navegaci\u00f3n entre estas vistas/p\u00e1ginas es Vue-router que es otra de las librer\u00edas del \"ecosistema\" de Vue (en este caso realizada por los desarrolladores de Vue).</p> <p>En resumen, en nuestra aplicaci\u00f3n (normalmente en el App.vue) tendremos una etiqueta <code>&lt;router-view&gt;</code> y lo que har\u00e1 vue-router es cargar en esa etiqueta el componente que corresponda en funci\u00f3n de la ruta que haya en la barra de direcciones del navegador. Por ejemplo si la URL es /products cargar\u00e1 un componente llamado ProductsTable (que mostrar\u00e1 una tabla con todos los productos de la aplicaci\u00f3n) y si la URL es /newprod cargar\u00e1 un componente llamado ProductForm con un formulario para a\u00f1adir un nuevo producto.</p>"},{"location":"menu/","title":"Men\u00fas y saltos de ruta","text":""},{"location":"menu/#crear-un-menu","title":"Crear un men\u00fa","text":"<p>Seguramente querremos un men\u00fa en nuestra SPA que nos permita ir a las diferentes rutas (que provocar\u00e1n que se carguen los componentes). Para ello usaremos la etiqueta \\. Ejemplo: HTML<pre><code>&lt;router-link to=\"/\"&gt;Home&lt;/router-link&gt;\n&lt;router-link to=\"/about\"&gt;Acerca de...&lt;/router-link&gt;\n</code></pre> <p>Nota</p> <p>Cuando accedemos a una ruta su elemento \\ adquiere la clase .router-link-active. <p>Si le hemos puesto la propiedad name a una ruta podemos hacer un enlace a ella con:</p> HTML<pre><code>&lt;router-link to=\"{name: 'nombre_de_la_ruta'}\"&gt;Home&lt;/router-link&gt;\n</code></pre> <p>Se puede hacer (aunque no es lo normal) una opci\u00f3n de men\u00fa a una ruta din\u00e1mica y pasarle el par\u00e1metro deseado. Por ejemplo para editar el usuario 5 haremos: HTML<pre><code>&lt;router-link to=\"{name: 'edit', params: {id: 5}}\"&gt;Editar usuario 5&lt;/router-link&gt;\n</code></pre></p>"},{"location":"parametros/","title":"Par\u00e1metros","text":""},{"location":"parametros/#saltar-a-una-ruta","title":"Saltar a una ruta","text":"<p>Al hacer <code>.use(router)</code> en el fichero main.js hacemos que esa variable (el router) est\u00e9 disponible para todos los componentes desde <code>this.$router</code>. Esto nos permite acceder al router desde un componente para, por ejemplo, cambiar a una ruta.</p> <p>Podemos cargar la ruta que queramos desde JS con JavaScript<pre><code>this.$router.push(ruta)\n</code></pre> Tenemos varios m\u00e9todos para navegar por c\u00f3digo: * <code>.push(newUrl)</code>: salta a la ruta newUrl y la a\u00f1ade al historial</p> <ul> <li><code>.replace(newURL)</code>: salta a la nueva ruta pero reemplaza en el historial la ruta actual por esta</li> <li><code>.go(num)</code>: permite saltar el num. de p\u00e1ginas indicadas adelante (ej. this.$router.go(1)) o atr\u00e1s (.go(-1)) por el historial</li> </ul>"},{"location":"parametros/#paso-de-parametros","title":"Paso de par\u00e1metros","text":"<p>Se pueden pasar par\u00e1metros a la ruta:</p> JavaScript<pre><code>this.$router.push({ name: 'users', params: { id: 123 }})\n</code></pre> <p>salta a la ruta con name users y le pasa como par\u00e1metro una id de valor 123 (si la ruta definida en users fuera /usuarios la URL cargada ser\u00e1 <code>/usuarios/123</code>). En el componente que se cargue en dicha ruta obtendremos el par\u00e1metro pasado con <code>this.$route.params.nombreparam</code> (en el ejemplo en <code>this.$route.params.id</code> obtenemos el valor <code>123</code>). Podemos pasar cualquier objeto como par\u00e1metro.</p> <p>Tambi\u00e9n se puede pasar una query a la ruta: JavaScript<pre><code>this.$router.push({ path: '/register', query: { plan: 'private' }})\n</code></pre></p> <p>salta a la URL <code>/register?plan=private</code>. En el componente que se carga obtenemos la query pasada con <code>this.$route.query</code> (obtenemos el objeto, en el ejemplo <code>{ plan: 'private' }</code>).</p>"},{"location":"parametros/#el-objeto-route","title":"El objeto $route","text":"<p>Es un objeto que contiene informaci\u00f3n de la ruta actual (no confundir con $router). Algunas de sus propiedades son: * params: el objeto con los par\u00e1metros pasados a la ruta (puede haber m\u00e1s de uno) * query: si hubiera alguna consulta en la ruta (tras '?') se obtiene aqu\u00ed un objeto con ellas * path: la ruta pasada (sin servidor ni querys, por ejemplo de <code>http://localhost:3000/users?company=5</code> devolver\u00eda '/users') * fullPath: la ruta pasada (con las querys, por ejemplo de <code>http://localhost:3000/users?company=5</code> devolver\u00eda '/users?company=5')</p>"},{"location":"parametros/#redireccionamiento-not-found","title":"Redireccionamiento. Not found","text":"<p>En una ruta podemos poner una redirecci\u00f3n a otra en lugar de un componente. Es lo que haremos para que si se carga una ruta inexistente nos cargue un componente que le indique al usuario que la ruta no existe.</p> JavaScript<pre><code>  routes: [\n    ...\n    {\n      path: '/not-found',\n      name: '404',\n      component: CompNotFound,\n    },\n    {\n      path: \"/:pathMatch(.*)*\"\n      redirect: {\n        name: '404',\n      },\n    }\n  ]\n</code></pre>"},{"location":"parametros/#cambio-de-parametros-en-una-ruta","title":"Cambio de par\u00e1metros en una ruta","text":"<p>Si cambiamos a la misma ruta pero con distintos par\u00e1metros Vue reutiliza la instancia del componente y no vuelve a lanzar sus hooks (created, mounted, ...). Esto har\u00e1 que no se ejecute el c\u00f3digo que tengamos all\u00ed. Por ejemplo supongamos que en una ruta '/edit/5' al cargar el componente se pide el registro 5 y se muestra en la p\u00e1gina. Si a continuaci\u00f3n cargamos la ruta '/edit/8' seguiremos viendo los datos del registro 5).</p> <p>La forma de solucionar esto es usar el elemento 'beforeRouteUpdate' y realizar all\u00ed la carga de los datos: Text Only<pre><code>beforeRouteUpdate (to, from, next) {\n    // C\u00f3digo que responde al cambio. En 'to' tenemos la ruta anterior y en 'from' la nueva\n    // antes de acabar hay que llamar a next()\n    // Aqu\u00ed cargamos los nuevos datos\n    next();\n} \n</code></pre></p>"},{"location":"parametros/#vistas-con-nombre-y-subvistas","title":"Vistas con nombre y Subvistas","text":"<p>Podemos cargar m\u00e1s de un componente usando varias etiquetas <code>&lt;router-view&gt;</code>. Por ejemplo si nuestra p\u00e1gina constar\u00e1 de 3  componentes (uno en la cabecera, otro el principal y otro en un aside pondremos en el HTML: HTML<pre><code>&lt;router-view class=\"cabecera\" name=\"top\"&gt;&lt;/router-view&gt;\n&lt;router-view class=\"main\"&gt;&lt;/router-view&gt;\n&lt;router-view class=\"aside\" name=\"aside\"&gt;&lt;/router-view&gt;```\n</code></pre></p> <p>Para que se carguen los 3 componentes lo debemos indicar al definir las rutas: JavaScript<pre><code>{\n    path: '/',  \n    components: {\n        default: CompMain,      // CompMain se cargar\u00e1 en el &lt;router-view&gt; sin nombre\n        top: CompCabecera,\n        aside: CompAside\n    }\n}\n</code></pre> Definiremos la ruta del siguiente modo:</p> JavaScript<pre><code>{\n    path: '/',  \n    components: {\n{\n  path: '/user/:id', \n  component: User,\n  children: [\n    { path: '', component: UserHome },\n    { path: 'profile', component: UserProfile },\n    { path: 'posts', component: UserPosts }\n  ]\n}\n</code></pre>"}]}